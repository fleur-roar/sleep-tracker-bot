import os
import logging
import csv
import json
from datetime import datetime, timedelta
from io import StringIO
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
EVENT_TYPES = {
    'sleep': "üååüåÉ –õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å",
    'wake_up': "üåÑüåÖ –í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", 
    'breakfast': "üçå –ó–∞–≤—Ç—Ä–∞–∫",
    'lunch': "ü•© –û–±–µ–¥", 
    'dinner': "ü•õ –£–∂–∏–Ω",
    'workout_start': "üòÅ –ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
    'workout_end': "‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
    'smart_start': "üìö –ù–∞—á–∞–ª–∞ —É—á–µ–±—É",
    'smart_end': "üôè –ó–∞–∫–æ–Ω—á–∏–ª–∞ —É—á–µ–±—É"
}

class SleepTrackerBot:
    def __init__(self):
        self.data_file = 'events_data.json'
        self._init_data_file()
    
    def _init_data_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists(self.data_file):
                with open(self.data_file, 'w', encoding='utf-8') as f:
                    json.dump([], f)
                logger.info("‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def save_event(self, user_id, event_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    events = json.load(f)
            else:
                events = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (UTC+3)
            timestamp = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')
            new_event = {
                'user_id': user_id,
                'event_type': event_type,
                'timestamp': timestamp
            }
            events.append(new_event)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(events, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user={user_id}, type={event_type}")
            return timestamp
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None
        
    def get_user_events(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not os.path.exists(self.data_file):
                return []
                
            with open(self.data_file, 'r', encoding='utf-8') as f:
                events = json.load(f)
            
            user_events = [e for e in events if e['user_id'] == user_id]
            user_events.sort(key=lambda x: x['timestamp'])
            
            return [(e['event_type'], e['timestamp']) for e in user_events]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def get_week_events(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
        try:
            week_ago = datetime.now() + timedelta(hours=3) - timedelta(days=7)
            all_events = self.get_user_events(user_id)
            
            week_events = []
            for event_type, timestamp_str in all_events:
                event_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                if event_time >= week_ago:
                    week_events.append((event_type, timestamp_str))
            
            return week_events
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {e}")
            return []
    
    def create_week_chart(self, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            week_events = self.get_week_events(user_id)
            
            if not week_events:
                return "üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Å–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º
            days_events = {}
            for event_type, timestamp_str in week_events:
                event_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                day_key = event_time.strftime('%Y-%m-%d')
                day_name = event_time.strftime('%a')
                
                if day_key not in days_events:
                    days_events[day_key] = {'name': day_name, 'events': []}
                
                time_str = event_time.strftime('%H:%M')
                days_events[day_key]['events'].append((time_str, event_type))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
            sorted_days = sorted(days_events.items())
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart = "üìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ù–ï–î–ï–õ–Æ:\n\n"
            
            for day_key, day_data in sorted_days[-7:]:
                date_obj = datetime.strptime(day_key, '%Y-%m-%d')
                date_str = date_obj.strftime('%d.%m')
                
                chart += f"üìÖ {date_str} ({day_data['name']}):\n"
                
                if day_data['events']:
                    day_data['events'].sort()
                    
                    for time_str, event_type in day_data['events']:
                        name = EVENT_TYPES.get(event_type, '–°–æ–±—ã—Ç–∏–µ')
                        chart += f"   ‚Ä¢ {time_str} - {name}\n"
                else:
                    chart += "   ‚îÄ‚îÄ‚îÄ —Å–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ ‚îÄ‚îÄ‚îÄ\n"
                
                chart += "\n"
            
            total_events = len(week_events)
            unique_days = len(days_events)
            chart += f"üìà –ò–¢–û–ì–û: {total_events} —Å–æ–±—ã—Ç–∏–π –∑–∞ {unique_days} –¥–Ω–µ–π"
            
            return chart
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞"
    
    def create_hourly_chart(self, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —á–∞—Å–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            week_events = self.get_week_events(user_id)
            
            if not week_events:
                return "‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Å–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ"
            
            # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —á–∞—Å–∞–º
            hourly_count = {i: 0 for i in range(24)}
            
            for event_type, timestamp_str in week_events:
                event_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                hour = event_time.hour
                hourly_count[hour] += 1
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart = "‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú (–Ω–µ–¥–µ–ª—è):\n\n"
            
            max_count = max(hourly_count.values()) if hourly_count.values() else 1
            
            for hour in range(24):
                count = hourly_count[hour]
                bar_length = int((count / max_count) * 10) if max_count > 0 else 0
                bar = '‚ñà' * bar_length
                
                hour_str = f"{hour:02d}:00"
                chart += f"{hour_str} {bar} {count} —Å–æ–±—ã—Ç–∏–π\n"
            
            total_events = len(week_events)
            most_active_hour = max(hourly_count, key=hourly_count.get) if hourly_count else "–Ω–µ—Ç"
            chart += f"\nüìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}"
            chart += f"\nüéØ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {most_active_hour}:00"
            
            return chart
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞"
    
    def create_csv_file(self, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        try:
            events = self.get_user_events(user_id)
            
            if not events:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f'temp_events_{user_id}.csv'
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow(['–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–í—Ä–µ–º—è', '–û–ø–∏—Å–∞–Ω–∏–µ'])
                
                # –î–∞–Ω–Ω—ã–µ
                for event_type, timestamp in events:
                    description = EVENT_TYPES.get(event_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    writer.writerow([event_type, timestamp, description])
            
            logger.info(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = SleepTrackerBot()

def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è.

üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π:
‚Ä¢ –°–æ–Ω –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏  
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

üéØ –ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é  
/chart - –≥—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º
/csv - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV
üçÇüçÅüåæüåπü•ÄüçÑ‚Äçüü´
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üååüåÉ –õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
                InlineKeyboardButton("üåÑüåÖ –í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
            ],
            [
                InlineKeyboardButton("üçå –ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
                InlineKeyboardButton("ü•© –û–±–µ–¥", callback_data='lunch'), 
                InlineKeyboardButton("ü•õ –£–∂–∏–Ω", callback_data='dinner')
            ],
            [
                InlineKeyboardButton("üòÅ –ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
                InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
            ],
            [
                InlineKeyboardButton("üìö –ù–∞—á–∞–ª–∞ —É—á–µ–±—É", callback_data='smart_start'),
                InlineKeyboardButton("üôè –ó–∞–∫–æ–Ω—á–∏–ª–∞ —É—á–µ–±—É", callback_data='smart_end')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")

def stats_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        user_id = update.effective_user.id
        chart = tracker.create_week_chart(user_id)
        
        if len(chart) > 4000:
            parts = [chart[i:i+4000] for i in range(0, len(chart), 4000)]
            for part in parts:
                update.message.reply_text(part)
        else:
            update.message.reply_text(chart)
            
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_command: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def chart_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chart - –≥—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º"""
    try:
        user_id = update.effective_user.id
        chart = tracker.create_hourly_chart(user_id)
        update.message.reply_text(chart)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —á–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chart_command: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

def csv_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /csv - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
    try:
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        csv_filename = tracker.create_csv_file(user_id)
        
        if not csv_filename:
            update.message.reply_text("üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(csv_filename, 'rb') as csv_file:
            update.message.reply_document(
                document=csv_file,
                filename='events.csv',
                caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(csv_filename)
            logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {csv_filename}")
        except:
            pass
            
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª CSV")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ csv_command: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        query.answer()
        
        user_id = query.from_user.id
        event_type = query.data
        
        if event_type in EVENT_TYPES:
            timestamp = tracker.save_event(user_id, event_type)
            
            if timestamp:
                event_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                formatted_time = event_time.strftime('%H:%M:%S')
                
                keyboard = [
                    [
                        InlineKeyboardButton("üååüåÉ –õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
                        InlineKeyboardButton("üåÑüåÖ –í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
                    ],
                    [
                        InlineKeyboardButton("üçå –ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
                        InlineKeyboardButton("ü•© –û–±–µ–¥", callback_data='lunch'),
                        InlineKeyboardButton("ü•õ –£–∂–∏–Ω", callback_data='dinner')
                    ],
                    [
                        InlineKeyboardButton("üòÅ –ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
                        InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
                    ],
                    [
                        InlineKeyboardButton("üìö –ù–∞—á–∞–ª–∞ —É—á–µ–±—É", callback_data='smart_start'),
                        InlineKeyboardButton("üôè –ó–∞–∫–æ–Ω—á–∏–ª–∞ —É—á–µ–±—É", callback_data='smart_end')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                query.edit_message_text(
                    text=f"‚úÖ {EVENT_TYPES[event_type]} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ {formatted_time}",
                    reply_markup=reply_markup
                )
            else:
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler: {e}")

def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        TOKEN = os.environ.get('BOT_TOKEN')
        
        if not TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
            return
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("stats", stats_command))
        dp.add_handler(CommandHandler("chart", chart_command))
        dp.add_handler(CommandHandler("csv", csv_command))
        dp.add_handler(CallbackQueryHandler(button_handler))
        dp.add_error_handler(error_handler)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()
