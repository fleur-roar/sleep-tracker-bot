import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
EVENT_TYPES = {
    'sleep': "–õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å",
    'wake_up': "–í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", 
    'breakfast': "–ó–∞–≤—Ç—Ä–∞–∫",
    'lunch': "–û–±–µ–¥",
    'dinner': "–£–∂–∏–Ω",
    'workout_start': "–ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
    'workout_end': "–ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
}

class SleepTrackerBot:
    def __init__(self):
        self.db_path = 'sleep_tracker.db'
        self._init_db()
    
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                event_type TEXT,
                timestamp DATETIME
            )
        ''')
        conn.commit()
        conn.close()
    
    def save_event(self, user_id: int, event_type: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute(
            'INSERT INTO events (user_id, event_type, timestamp) VALUES (?, ?, ?)',
            (user_id, event_type, timestamp)
        )
        conn.commit()
        conn.close()
        logger.info(f"–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user={user_id}, type={event_type}")
        return timestamp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
tracker = SleepTrackerBot()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get('BOT_TOKEN', '7578614408:AAH2vKc9k0Y7q8vx1s7v8v8N9tN9tN9tN9t')

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è.

    üìä –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
    ‚Ä¢ –í—Ä–µ–º—è —Å–Ω–∞ –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    ‚Ä¢ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏
    ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

    üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π!
    """
    
    keyboard = [
        [
            InlineKeyboardButton("–õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
            InlineKeyboardButton("–í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
        ],
        [
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
            InlineKeyboardButton("–û–±–µ–¥", callback_data='lunch'),
            InlineKeyboardButton("–£–∂–∏–Ω", callback_data='dinner')
        ],
        [
            InlineKeyboardButton("–ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
            InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(welcome_text, reply_markup=reply_markup)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    event_type = query.data
    
    if event_type in EVENT_TYPES:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            timestamp = tracker.save_event(user_id, event_type)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            event_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
            formatted_time = event_time.strftime('%H:%M:%S')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("–õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
                    InlineKeyboardButton("–í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
                ],
                [
                    InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
                    InlineKeyboardButton("–û–±–µ–¥", callback_data='lunch'),
                    InlineKeyboardButton("–£–∂–∏–Ω", callback_data='dinner')
                ],
                [
                    InlineKeyboardButton("–ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
                    InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            query.edit_message_text(
                text=f"‚úÖ {EVENT_TYPES[event_type]} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ {formatted_time}",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è"
            )

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    updater = Updater(TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    updater.start_polling()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –µ–≥–æ
    updater.idle()

if __name__ == "__main__":
    main()
