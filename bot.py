import os
import logging
import csv
import json
from datetime import datetime
from io import StringIO
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
EVENT_TYPES = {
    'sleep': "–õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å",
    'wake_up': "–í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", 
    'breakfast': "–ó–∞–≤—Ç—Ä–∞–∫",
    'lunch': "–û–±–µ–¥", 
    'dinner': "–£–∂–∏–Ω",
    'workout_start': "–ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
    'workout_end': "–ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
}

class SleepTrackerBot:
    def __init__(self):
        self.data_file = 'events_data.json'
        self._init_data_file()
    
    def _init_data_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π
            if not os.path.exists(self.data_file):
                with open(self.data_file, 'w', encoding='utf-8') as f:
                    json.dump([], f)
                logger.info("‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.info("‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def save_event(self, user_id, event_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.data_file, 'r', encoding='utf-8') as f:
                events = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            new_event = {
                'user_id': user_id,
                'event_type': event_type,
                'timestamp': timestamp
            }
            events.append(new_event)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(events, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user={user_id}, type={event_type}")
            return timestamp
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def get_user_events(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                events = json.load(f)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_id
            user_events = [e for e in events if e['user_id'] == user_id]
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            user_events.sort(key=lambda x: x['timestamp'])
            
            return [(e['event_type'], e['timestamp']) for e in user_events]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
    
    def export_to_csv(self, user_id):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π –≤ CSV"""
        try:
            events = self.get_user_events(user_id)
            
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', '–í—Ä–µ–º—è', '–û–ø–∏—Å–∞–Ω–∏–µ'])
            
            # –î–∞–Ω–Ω—ã–µ
            for event_type, timestamp in events:
                description = EVENT_TYPES.get(event_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                writer.writerow([event_type, timestamp, description])
            
            return output.getvalue()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
            return ""

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
tracker = SleepTrackerBot()

def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è.

üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π:
‚Ä¢ –°–æ–Ω –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏  
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏!
üì• /csv - —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üò¥ –õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
                InlineKeyboardButton("üåÖ –í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
            ],
            [
                InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
                InlineKeyboardButton("üç≤ –û–±–µ–¥", callback_data='lunch'), 
                InlineKeyboardButton("üçΩÔ∏è –£–∂–∏–Ω", callback_data='dinner')
            ],
            [
                InlineKeyboardButton("üí™ –ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
                InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")

def csv_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /csv - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
    try:
        user_id = update.effective_user.id
        events = tracker.get_user_events(user_id)
        
        if not events:
            update.message.reply_text("üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV
        csv_data = tracker.export_to_csv(user_id)
        
        if csv_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            update.message.reply_document(
                document=('events.csv', csv_data.encode('utf-8')),
                caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"
            )
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª CSV")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ csv_command: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

def button_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        query.answer()
        
        user_id = query.from_user.id
        event_type = query.data
        
        if event_type in EVENT_TYPES:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            timestamp = tracker.save_event(user_id, event_type)
            
            if timestamp:
                event_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                formatted_time = event_time.strftime('%H:%M:%S')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üò¥ –õ–µ–≥–ª–∞ —Å–ø–∞—Ç—å", callback_data='sleep'),
                        InlineKeyboardButton("üåÖ –í—Å—Ç–∞–ª–∞ —É—Ç—Ä–æ–º", callback_data='wake_up')
                    ],
                    [
                        InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast'),
                        InlineKeyboardButton("üç≤ –û–±–µ–¥", callback_data='lunch'),
                        InlineKeyboardButton("üçΩÔ∏è –£–∂–∏–Ω", callback_data='dinner')
                    ],
                    [
                        InlineKeyboardButton("üí™ –ù–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_start'),
                        InlineKeyboardButton("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='workout_end')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                query.edit_message_text(
                    text=f"‚úÖ {EVENT_TYPES[event_type]} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ {formatted_time}",
                    reply_markup=reply_markup
                )
            else:
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler: {e}")

def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        TOKEN = os.environ.get('BOT_TOKEN')
        
        if not TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
            return
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("csv", csv_command))
        dp.add_handler(CallbackQueryHandler(button_handler))
        dp.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()
